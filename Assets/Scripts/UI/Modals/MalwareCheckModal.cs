using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class MalwareCheckModal : M8.ModalController, M8.IModalPush, M8.IModalPop {
    
    [System.Serializable]
    public class ItemData {
        public FlaggedItemData flaggedItem;
        public FlaggedItemData[] flaggedItemAlts; //alternate items to check if flagged

        public FlaggedItemData[] malwareItems;

        public bool isFlagged {
            get {
                if(flaggedItem.isFlagged)
                    return true;

                for(int i = 0; i < flaggedItemAlts.Length; i++) {
                    if(flaggedItemAlts[i].isFlagged)
                        return true;
                }

                return false;
            }
        }
    }

    [Header("Data")]
    public ItemData[] itemData;
    public string progressModal = "";
    [M8.Localize]
    public string progressTitleFormat;
    public float progressDelay = 3f;    
    [M8.Localize]
    public string malwareNotFoundTextRef;
    public string malwareDetailModal = "malwareDetail";

    [Header("UI")]
    public ItemSelectFlagWidget itemWidgetTemplate;

    public Transform contentRoot;
    public ScrollRect scroller;

    public Selectable checkSelectable;

    private List<ItemSelectFlagWidget> mItemActive = new List<ItemSelectFlagWidget>();
    private List<ItemSelectFlagWidget> mItemCache = new List<ItemSelectFlagWidget>();

    private int mCurIndex;

    private Coroutine mAnalyzeRout;

    public void CheckCurrentSelect() {
        if(mAnalyzeRout != null) //fail-safe
            return;

        mAnalyzeRout = StartCoroutine(DoAnalyze(mCurIndex));
    }

    void M8.IModalPop.Pop() {
        if(mAnalyzeRout != null) {
            StopCoroutine(mAnalyzeRout);
            mAnalyzeRout = null;
        }
    }

    void M8.IModalPush.Push(M8.GenericParams parms) {
        ClearItems();
                
        //go through items and check which are flagged
        for(int i = 0; i < itemData.Length; i++) {
            var itm = itemData[i];
            if(itm.isFlagged) {
                AllocateItem(i, itm);
            }
        }

        scroller.normalizedPosition = new Vector2(0f, 1f);

        if(mItemActive.Count > 0) {
            mCurIndex = mItemActive[0].index;

            checkSelectable.interactable = true;

            mItemActive[0].isSelected = true;
        }
        else {
            checkSelectable.interactable = false;
        }
    }

    void OnDisable() {
        mAnalyzeRout = null;
    }

    void Awake() {
        itemWidgetTemplate.gameObject.SetActive(false);
    }

    void OnItemClick(int index) {
        if(mCurIndex != index) {
            var itm = GetItem(mCurIndex);
            itm.isSelected = false;

            mCurIndex = index;

            itm = GetItem(mCurIndex);
            itm.isSelected = true;
        }
    }

    IEnumerator DoAnalyze(int ind) {
        var itmWidget = GetItem(mCurIndex);
        if(itmWidget != null) {
            var itm = itemData[mCurIndex];

            //is item already checked?
            if(!itmWidget.isFlagged) {
                //show progress
                var progParms = new M8.GenericParams();
                progParms[ProgressModal.parmTitleString] = string.Format(M8.Localize.Get(progressTitleFormat), itm.flaggedItem.key);
                progParms[ProgressModal.parmDelay] = progressDelay;

                M8.ModalManager.main.Open(progressModal, progParms);

                while(M8.ModalManager.main.isBusy || M8.ModalManager.main.IsInStack(progressModal))
                    yield return null;

                //check flag
                itmWidget.isFlagged = true;
                GameData.instance.SetMalwareChecked(itm.flaggedItem.key, true);
            }

            //show dialogs
            if(itm.malwareItems.Length > 0) {
                var malParms = new M8.GenericParams();

                //go through each items to show dialog
                for(int i = 0; i < itm.malwareItems.Length; i++) {
                    var malItm = itm.malwareItems[i];

                    malParms[MalwareDetailModal.parmFilename] = malItm.key;
                    malParms[MalwareDetailModal.parmMalwareData] = malItm.malwareData;

                    M8.ModalManager.main.Open(malwareDetailModal, malParms);

                    while(M8.ModalManager.main.isBusy || M8.ModalManager.main.IsInStack(malwareDetailModal))
                        yield return null;

                    //flag malware for host item
                    GameData.instance.SetMalwareChecked(malItm.key, true);
                }
            }
            else {
                //show no malware message
                MessageModal.Open(itm.flaggedItem.key, M8.Localize.Get(malwareNotFoundTextRef));

                while(M8.ModalManager.main.isBusy || M8.ModalManager.main.IsInStack(MessageModal.modal))
                    yield return null;
            }
        }

        mAnalyzeRout = null;
    }

    private ItemSelectFlagWidget GetItem(int index) {
        for(int i = 0; i < mItemActive.Count; i++) {
            var itm = mItemActive[i];
            if(itm.index == index)
                return itm;
        }

        return null;
    }

    private void ClearItems() {
        for(int i = 0; i < mItemActive.Count; i++) {
            var itm = mItemActive[i];
            if(itm) {
                itm.gameObject.SetActive(false);
                mItemCache.Add(itm);
            }
        }

        mItemActive.Clear();
    }

    private ItemSelectFlagWidget AllocateItem(int index, ItemData dat) {
        ItemSelectFlagWidget ret = null;

        if(mItemCache.Count > 0) {
            var cacheInd = mItemCache.Count - 1;

            ret = mItemCache[cacheInd];

            mItemCache.RemoveAt(cacheInd);
        }
        else {
            ret = Instantiate(itemWidgetTemplate);
            ret.clickCallback += OnItemClick;
        }

        if(ret) {
            ret.gameObject.SetActive(true);
            ret.transform.SetParent(contentRoot, false);
            ret.transform.SetSiblingIndex(index);

            ret.Setup(index);
            ret.text = dat.flaggedItem.key;

            ret.isSelected = false;
            ret.isFlagged = GameData.instance.IsMalwareChecked(dat.flaggedItem.key);

            mItemActive.Add(ret);
        }

        return ret;
    }
}