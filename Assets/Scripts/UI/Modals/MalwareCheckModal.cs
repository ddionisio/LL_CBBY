using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class MalwareCheckModal : M8.ModalController, M8.IModalPush {
    [System.Serializable]
    public class MalwareInfo {
        public FlaggedItemData flaggedKey; //use the key part
        public MalwareData malwareData;
    }

    [System.Serializable]
    public class ItemData {
        public FlaggedItemData flaggedItem;
        public FlaggedItemData[] flaggedItemAlts; //alternate items to check if flagged

        public MalwareInfo[] malwareItems;

        public bool isFlagged {
            get {
                if(flaggedItem.isFlagged)
                    return true;

                for(int i = 0; i < flaggedItemAlts.Length; i++) {
                    if(flaggedItemAlts[i].isFlagged)
                        return true;
                }

                return false;
            }
        }
    }

    [Header("Data")]
    public ItemData[] itemData;
    [M8.Localize]
    public string malwareNotFoundTextRef;

    [Header("UI")]
    public ItemSelectFlagWidget itemWidgetTemplate;

    public Transform contentRoot;
    public ScrollRect scroller;

    public Selectable checkSelectable;

    private List<ItemSelectFlagWidget> mItemActive = new List<ItemSelectFlagWidget>();
    private List<ItemSelectFlagWidget> mItemCache = new List<ItemSelectFlagWidget>();

    private int mCurIndex;

    public void CheckCurrentSelect() {
        var itm = GetItem(mCurIndex);
        if(itm != null) {
            //do stuff
        }
    }

    void M8.IModalPush.Push(M8.GenericParams parms) {
        ClearItems();
                
        //go through items and check which are flagged
        int itmInd = 0;
        for(int i = 0; i < itemData.Length; i++) {
            var itm = itemData[i];
            if(itm.isFlagged) {
                AllocateItem(itmInd, itm);
                itmInd++;
            }
        }

        scroller.normalizedPosition = new Vector2(0f, 1f);

        if(mItemActive.Count > 0) {
            mCurIndex = mItemActive[0].index;

            checkSelectable.interactable = true;

            mItemActive[0].isSelected = true;
        }
        else {
            checkSelectable.interactable = false;
        }
    }

    void OnItemClick(int index) {
        if(mCurIndex != index) {
            var itm = GetItem(mCurIndex);
            itm.isSelected = false;

            mCurIndex = index;

            itm = GetItem(mCurIndex);
            itm.isSelected = true;
        }
    }

    private ItemSelectFlagWidget GetItem(int index) {
        for(int i = 0; i < mItemActive.Count; i++) {
            var itm = mItemActive[i];
            if(itm.index == index)
                return itm;
        }

        return null;
    }

    private void ClearItems() {
        for(int i = 0; i < mItemActive.Count; i++) {
            var itm = mItemActive[i];
            if(itm) {
                itm.gameObject.SetActive(false);
                mItemCache.Add(itm);
            }
        }

        mItemActive.Clear();
    }

    private ItemSelectFlagWidget AllocateItem(int index, ItemData dat) {
        ItemSelectFlagWidget ret = null;

        if(mItemCache.Count > 0) {
            var cacheInd = mItemCache.Count - 1;

            ret = mItemCache[cacheInd];

            mItemCache.RemoveAt(cacheInd);
        }
        else {
            ret = Instantiate(itemWidgetTemplate);
            ret.clickCallback += OnItemClick;
        }

        if(ret) {
            ret.gameObject.SetActive(true);
            ret.transform.SetParent(contentRoot, false);
            ret.transform.SetSiblingIndex(index);

            ret.Setup(index);
            ret.text = dat.flaggedItem.key;

            ret.isFlagged = GameData.instance.IsMalwareChecked(dat.flaggedItem.key);

            mItemActive.Add(ret);
        }

        return ret;
    }
}